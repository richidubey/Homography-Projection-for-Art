{"version":3,"sources":["components/ImageUploader.js","components/HomographyInfoModal.js","App.js","reportWebVitals.js","index.js","components/ImageCanvas.js"],"names":["ImageUploader","_ref","onImageUpload","React","createElement","Box","display","justifyContent","accept","style","id","type","onChange","event","target","files","file","imageUrl","URL","createObjectURL","htmlFor","Button","variant","color","component","HomographyInfoModal","open","onClose","Modal","flexDirection","alignItems","p","bgcolor","borderRadius","width","margin","marginTop","Typography","gutterBottom","paragraph","App","themeMode","setThemeMode","useState","isModalOpen","setIsModalOpen","selectedImage","setSelectedImage","uploadedImage","setUploadedImage","canvasRef","useMediaQuery","useRef","uploadedImageRef","theme","createTheme","palette","mode","ThemeProvider","CssBaseline","Container","maxWidth","my","align","IconButton","onClick","marginLeft","InfoIcon","toggleTheme","prevMode","Brightness7","Brightness4","gap","map","image","index","key","setTimeout","current","scrollIntoView","behavior","block","handleImageClick","border","cursor","padding","transition","src","alt","height","objectFit","mx","flexShrink","Divider","orientation","backgroundColor","lineHeight","pointerEvents","mt","ref","ImageCanvas","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","editor","onReady","useFabricJSEditor","points","setPoints","isRectangleDrawn","setIsRectangleDrawn","transformedImage","setTransformedImage","isLoading","setIsLoading","scaleFactor","useEffect","img","window","Image","onload","Math","min","canvasWidth","canvasHeight","canvas","clear","setWidth","setHeight","setBackgroundImage","fabric","scaleX","scaleY","originX","originY","left","top","renderAll","bind","tempPoints","on","options","pointer","length","x","y","circle","Circle","radius","fill","selectable","add","originalX","originalY","push","line","Line","stroke","marginBottom","fontWeight","FabricJSCanvas","className","async","response","fetch","blob","File","formData","FormData","append","JSON","stringify","res","axios","post","data","byteArray","Uint8Array","from","Buffer","Blob","url","alert","error","console","disabled","marginRight","handleReset","ml","CircularProgress","size"],"mappings":"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","file":"static/js/main.ac50defd.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Box } from '@mui/material';\n\nfunction ImageUploader({ onImageUpload }) {\n    const handleImageChange = (event) => {\n        if (event.target.files && event.target.files[0]) {\n            const file = event.target.files[0];\n            const imageUrl = URL.createObjectURL(file);\n            onImageUpload(imageUrl); // Pass the uploaded image URL to the parent component\n        }\n    };\n\n    return (\n        <Box display=\"flex\" justifyContent=\"center\">\n            <input\n                accept=\"image/*\"\n                style={{ display: 'none' }}\n                id=\"image-upload-input\"\n                type=\"file\"\n                onChange={handleImageChange}\n            />\n            <label htmlFor=\"image-upload-input\">\n                <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                    Upload Image\n                </Button>\n            </label>\n        </Box>\n    );\n}\n\nexport default ImageUploader;\n","// HomographyInfoModal.js\nimport React from 'react';\nimport { Box, Modal, Typography } from '@mui/material';\n\nfunction HomographyInfoModal({ open, onClose }) {\n    return (\n        <Modal open={open} onClose={onClose}>\n            <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                p={4}\n                bgcolor=\"background.paper\"\n                borderRadius=\"8px\"\n                style={{ width: '80%', margin: 'auto', marginTop: '10%' }}\n            >\n                <Typography variant=\"h5\" gutterBottom>\n                    Homography and Matrix Transformation\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                    Homography is a transformation that maps points from one plane to another using matrix multiplication.\n                    In this app, we calculate the homography matrix based on your selected points, allowing you to see the perspective transformation in real-time.\n                </Typography>\n                {/* Here you can add an animation using CSS or animated libraries */}\n            </Box>\n        </Modal>\n    );\n}\n\nexport default HomographyInfoModal;\n","import React, { useState, useRef } from 'react';\nimport { Container, Typography, Box, CssBaseline, IconButton, useMediaQuery, Divider } from '@mui/material';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport ImageUploader from './components/ImageUploader';\nimport ImageCanvas from './components/ImageCanvas';\nimport InfoIcon from '@mui/icons-material/Info';\nimport HomographyInfoModal from './components/HomographyInfoModal';\nimport { Brightness4, Brightness7 } from '@mui/icons-material';\n\nfunction App() {\n    const [themeMode, setThemeMode] = useState('light');\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedImage, setSelectedImage] = useState('');\n    const [uploadedImage, setUploadedImage] = useState(null);\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const canvasRef = useRef(null);\n    const uploadedImageRef = useRef(null);\n\n    const theme = createTheme({\n        palette: {\n            mode: themeMode,\n        },\n    });\n\n    const toggleTheme = () => {\n        setThemeMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n    };\n\n    const handleImageClick = (image) => {\n        setSelectedImage(image);\n        setTimeout(() => {\n            if (canvasRef.current) {\n                canvasRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            }\n        }, 100);\n    };\n\n    const handleImageUpload = (imageUrl) => {\n        setUploadedImage(imageUrl); // Set the uploaded image URL\n        setTimeout(() => {\n          if (uploadedImageRef.current) {\n            uploadedImageRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          }\n      }, 100);\n    };\n\n    const images = [\n        './additional_data/Sistinechapel.jpg',\n        './additional_data/pierro_della.jpg',\n        './additional_data/veneziano.jpg',\n    ];\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Container maxWidth=\"md\">\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" my={4}>\n                    <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                        Homography Transformation for Art Images\n                    </Typography>\n                    <IconButton onClick={() => setIsModalOpen(true)} color=\"inherit\" style={{ marginLeft: 10 }}>\n                        <InfoIcon />\n                    </IconButton>\n                    <IconButton onClick={toggleTheme} color=\"inherit\" style={{ marginLeft: 10 }}>\n                        {themeMode === 'dark' ? <Brightness7 /> : <Brightness4 />}\n                    </IconButton>\n                </Box>\n                <Typography variant=\"body1\" align=\"center\" gutterBottom>\n                    Select an image from the options below (or upload), select exactly 4 points to define a quadrilateral, and see the perspective transformation!\n                </Typography>\n\n                {/* Image Selection */}\n                <Box display=\"flex\" justifyContent=\"center\" gap={2} my={4}>\n                    {images.map((image, index) => (\n                        <Box\n                            key={index}\n                            onClick={() => handleImageClick(image)}\n                            border={selectedImage === image ? '4px solid #1976d2' : '4px solid transparent'}\n                            borderRadius={2}\n                            style={{\n                                cursor: 'pointer',\n                                padding: 2,\n                                alignItems: \"center\",\n                                transition: 'border-color 0.3s',\n                            }}\n                        >\n                            <img\n                                src={image}\n                                alt={`Art Image ${index + 1}`}\n                                style={{\n                                    width: 250,\n                                    height: 250,\n                                    objectFit: 'cover',\n                                    borderRadius: 4,\n                                    alignItems: 'center',\n                                }}\n                            />\n                        </Box>\n                    ))}\n\n                    {/* OR Divider */}\n                    <Box\n                        mx={4}\n                        display=\"flex\"\n                        flexDirection=\"column\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        style={{\n                            flexShrink: 0,\n                            width: '40px',\n                        }}\n                    >\n                        <Divider\n                            orientation=\"vertical\"\n                            style={{\n                                height: '40%',\n                                backgroundColor: '#aaa',\n                            }}\n                        />\n                        <Typography\n                            variant=\"body1\"\n                            style={{\n                                margin: '8px 0',\n                                lineHeight: 1,\n                                pointerEvents: 'none',\n                            }}\n                        >\n                            OR\n                        </Typography>\n                        <Divider\n                            orientation=\"vertical\"\n                            style={{\n                                height: '40%',\n                                backgroundColor: '#aaa',\n                            }}\n                        />\n                    </Box>\n\n                    {/* Upload Image Button */}\n                    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <ImageUploader onImageUpload={handleImageUpload} />\n                    </Box>\n                </Box>\n\n                {/* <Typography variant=\"body2\" align=\"center\" gutterBottom>\n                    Selected Image: {selectedImage ? selectedImage.split('/').pop() : 'None'}\n                </Typography> */}\n\n                {/* Render Uploaded Image Below */}\n                {uploadedImage && (\n                    <Box mt={4} ref={uploadedImageRef}>\n                        <ImageCanvas image={uploadedImage} />\n                    </Box>\n                )}\n\n                {selectedImage && (\n                    <Box mt={4} ref={canvasRef}>\n                        <ImageCanvas image={selectedImage} />\n                    </Box>\n                )}\n\n                <HomographyInfoModal open={isModalOpen} onClose={() => setIsModalOpen(false)} />\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// ImageCanvas.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Typography, Box, Button, CircularProgress } from '@mui/material';\nimport { FabricJSCanvas, useFabricJSEditor } from 'fabricjs-react';\nimport axios from 'axios';\n\nfunction ImageCanvas({ image }) {\n    const { editor, onReady } = useFabricJSEditor();\n    const [points, setPoints] = useState([]);\n    const [isRectangleDrawn, setIsRectangleDrawn] = useState(false);\n    const [transformedImage, setTransformedImage] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const canvasRef = useRef(null);\n\n    const MAX_CANVAS_WIDTH = 800;\n    const MAX_CANVAS_HEIGHT = 600;\n\n    let scaleFactor = 1;\n\n    useEffect(() => {\n        if (editor && image) {\n            const img = new window.Image();\n            img.src = image;\n            img.onload = () => {\n                scaleFactor = Math.min(\n                    MAX_CANVAS_WIDTH / img.width,\n                    MAX_CANVAS_HEIGHT / img.height,\n                    1\n                );\n\n                const canvasWidth = img.width * scaleFactor;\n                const canvasHeight = img.height * scaleFactor;\n\n                editor.canvas.clear();\n                editor.canvas.setWidth(canvasWidth);\n                editor.canvas.setHeight(canvasHeight);\n\n                editor.canvas.setBackgroundImage(\n                    new window.fabric.Image(img, {\n                        scaleX: scaleFactor,\n                        scaleY: scaleFactor,\n                        originX: 'center',\n                        originY: 'center',\n                        left: canvasWidth / 2,\n                        top: canvasHeight / 2,\n                    }),\n                    editor.canvas.renderAll.bind(editor.canvas)\n                );\n\n                const tempPoints = [];\n\n                editor.canvas.on('mouse:down', function (options) {\n                    if (options.pointer && tempPoints.length < 4) {\n                        const { x, y } = options.pointer;\n                        const circle = new window.fabric.Circle({\n                            radius: 5,\n                            fill: 'red',\n                            left: x,\n                            top: y,\n                            selectable: false,\n                            originX: 'center',\n                            originY: 'center',\n                        });\n                        editor.canvas.add(circle);\n\n                        const originalX = x / scaleFactor;\n                        const originalY = y / scaleFactor;\n                        tempPoints.push([originalX, originalY]);\n\n                        if (tempPoints.length > 1) {\n                            const line = new window.fabric.Line(\n                                [\n                                    tempPoints[tempPoints.length - 2][0] * scaleFactor,\n                                    tempPoints[tempPoints.length - 2][1] * scaleFactor,\n                                    x,\n                                    y,\n                                ],\n                                { stroke: 'blue', selectable: false }\n                            );\n                            editor.canvas.add(line);\n                        }\n\n                        if (tempPoints.length === 4) {\n                            setPoints(tempPoints);\n                            setIsRectangleDrawn(true);\n\n                            // Connect the last point to the first to complete the rectangle\n                            const line = new window.fabric.Line(\n                                [\n                                    x,\n                                    y,\n                                    tempPoints[0][0] * scaleFactor,\n                                    tempPoints[0][1] * scaleFactor,\n                                ],\n                                { stroke: 'blue', selectable: false }\n                            );\n                            editor.canvas.add(line);\n                        }\n                    }\n                });\n            };\n        }\n    }, [editor, image]);\n\n    const handleReset = () => {\n        if (editor) {\n            editor.canvas.clear();\n            setPoints([]);\n            setIsRectangleDrawn(false);\n            setTransformedImage(null);\n        }\n    };\n\n    const handleTransform = async () => {\n        if (points.length !== 4) {\n            alert('Please select exactly 4 points.');\n            return;\n        }\n\n        setIsLoading(true);\n\n        try {\n            const response = await fetch(image);\n            const blob = await response.blob();\n            const file = new File([blob], 'image.jpg', { type: 'image/jpeg' });\n            const formData = new FormData();\n            formData.append('file', file);\n            formData.append('points', JSON.stringify(points));\n\n            const res = await axios.post('http://localhost:8000/transform', formData);\n            if (res.data.image) {\n                const byteArray = Uint8Array.from(Buffer.from(res.data.image, 'hex'));\n                const blob = new Blob([byteArray], { type: 'image/jpeg' });\n                const url = URL.createObjectURL(blob);\n\n                setTransformedImage(url);\n            } else {\n                alert('Transformation failed.');\n            }\n        } catch (error) {\n            console.error(error);\n            alert('An error occurred during transformation.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <Box\n            mt={2}\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n        >\n            {points.length < 4 && (\n            <Typography\n                variant=\"body1\"\n                color=\"error\"\n                style={{ marginBottom: '8px', fontWeight: 'bold' }}\n            >\n                Please select exactly 4 points to define a quadrilateral\n            </Typography>\n        )}\n        \n            <FabricJSCanvas\n                ref={canvasRef}\n                className=\"canvas\"\n                onReady={onReady}\n                style={{\n                    border: '1px solid #ddd',\n                    width: `${MAX_CANVAS_WIDTH}px`,\n                    height: `${MAX_CANVAS_HEIGHT}px`,\n                }}\n            />\n            <Box mt={2} display=\"flex\" alignItems=\"center\">\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleTransform}\n                    disabled={points.length !== 4 || isLoading}\n                    style={{ marginRight: '10px' }}\n                >\n                    Transform Image\n                </Button>\n                <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={handleReset}\n                    disabled={isLoading}\n                >\n                    Reset\n                </Button>\n                {isLoading && (\n                    <Box ml={2}>\n                        <CircularProgress size={24} />\n                    </Box>\n                )}\n            </Box>\n            {transformedImage && (\n                <Box mt={2}>\n                    <img src={transformedImage} alt=\"Transformed\" style={{ width: '100%', marginTop: '10px' }} />\n                </Box>\n            )}\n        </Box>\n    );\n}\n\nexport default ImageCanvas;\n"],"sourceRoot":""}